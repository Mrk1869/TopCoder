import math
import string

class GuessTheNumber:
    def noGuesses(self, upper, answer):

        count = 0
        lower = 1

        while(1):
            count += 1
            x = (lower + upper)/2
            if answer == x:
                return count
            elif x < answer:
                lower = x + 1
            elif x > answer:
                upper = x - 1

# BEGIN KAWIGIEDIT TESTING
# Generated by KawigiEdit-pfx 2.1.9
import sys
import time
def KawigiEdit_RunTest(testNum, p0, p1, hasAnswer, p2):
    sys.stdout.write(str("Test ") + str(testNum) + str(": [") + str(p0) + str(",") + str(p1))
    print(str("]"))
    obj = GuessTheNumber()
    startTime = time.clock()
    answer = obj.noGuesses(p0, p1)
    endTime = time.clock()
    res = True
    print(str("Time: ") + str((endTime - startTime)) + str(" seconds"))
    if (hasAnswer):
        print(str("Desired answer:"))
        print(str("\t") + str(p2))

    print(str("Your answer:"))
    print(str("\t") + str(answer))
    if (hasAnswer):
        res = answer == p2

    if (not res):
        print(str("DOESN'T MATCH!!!!"))
    elif ((endTime - startTime) >= 2):
        print(str("FAIL the timeout"))
        res = False
    elif (hasAnswer):
        print(str("Match :-)"))
    else:
        print(str("OK, but is it right?"))

    print(str(""))
    return res

all_right = True


# ----- test 0 -----
p0 = 9
p1 = 6
p2 = 3
all_right = KawigiEdit_RunTest(0, p0, p1, True, p2) and all_right
# ------------------

# ----- test 1 -----
p0 = 1000
p1 = 750
p2 = 2
all_right = KawigiEdit_RunTest(1, p0, p1, True, p2) and all_right
# ------------------

# ----- test 2 -----
p0 = 643
p1 = 327
p2 = 7
all_right = KawigiEdit_RunTest(2, p0, p1, True, p2) and all_right
# ------------------

# ----- test 3 -----
p0 = 157
p1 = 157
p2 = 8
all_right = KawigiEdit_RunTest(3, p0, p1, True, p2) and all_right
# ------------------

# ----- test 4 -----
p0 = 128
p1 = 64
p2 = 1
all_right = KawigiEdit_RunTest(4, p0, p1, True, p2) and all_right
# ------------------

if (all_right):
    print(str("You're a stud (at least on the example cases)!"))
else:
    print(str("Some of the test cases had errors."))

# PROBLEM STATEMENT
# A popular guessing game is "Guess the number", where one person selects a number in a known range, and another person tries to guess that number. After each guess, the first person reveals
# whether the guess was correct, too high or too low.
#
# Pretty soon one learns the best strategy, which is to guess the middle number among those not yet ruled out. If there is no single middle number, then there are two numbers to choose from. In that case, we choose the smallest of those numbers.
#
# The algorithm can be described like this:
#
#
# Init lower and upper bound
# Repeat
#   x = (lower bound + upper bound)/2  (round down if necessary)
#   Make guess x
#   If x is too low, set lower bound to x+1
#   If x is too high, set upper bound to x-1
# Until x is correct
#
#
# For instance, assume that the lower and upper bound initally are 1 and 9, respectively. The middle number in this range is 5. If this is "too low", the new bounds become 6 and 9. This range contains four numbers, and there is thus no single middle number. The two numbers in the middle are 7 and 8, and the smallest of these is 7, so our next guess then becomes 7.
#
# Create a class GuessTheNumber which contains the method noGuesses which takes an integer upper, the initial upper bound of the range (the inital lower bound is always 1), and an integer answer, the number selected by the first person. The method should return an integer representing the total number of guesses required for the second person to guess the correct number using the method described above.
#
# DEFINITION
# Class:GuessTheNumber
# Method:noGuesses
# Parameters:integer, integer
# Returns:integer
# Method signature:def noGuesses(self, upper, answer):
#
#
# CONSTRAINTS
# -upper will be between 1 and 1000, inclusive.
# -answer will be between 1 and upper, inclusive.
#
#
# EXAMPLES
#
# 0)
# 9
# 6
#
# Returns: 3
#
# The first guess will be (1+9)/2=5, which is too low. The new lower bound then becomes 5+1=6.
# The second guess then becomes (6+9)/2=7, which is too high. The new upper bound then becomes 7-1=6.
# The third guess is then of course (6+6)/2)=6, which is correct. So, three guesses were required, and the method thus returns 3.
#
#
# 1)
# 1000
# 750
#
# Returns: 2
#
# The first guess will be 500, the second guess 750.
#
#
# 2)
# 643
# 327
#
# Returns: 7
#
# The guesses are 322, 483, 402, 362, 342, 332 and finally 327, so the method returns 7.
#
# 3)
# 157
# 157
#
# Returns: 8
#
# Here the guesses are 79, 118, 138, 148, 153, 155, 156 and finally 157. The method thus returns 8.
#
#
# 4)
# 128
# 64
#
# Returns: 1
#
# END KAWIGIEDIT TESTING
#Powered by KawigiEdit-pfx 2.1.9!

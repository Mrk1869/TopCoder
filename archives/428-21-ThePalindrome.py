import math
import string

class ThePalindrome:

    def isP(self, s):
        for i in xrange(len(s)):
            if s[i] != s[len(s) - 1 - i]:
                return False
        return True

    def find(self, s):
        reverse = ""
        for i in xrange(len(s)):
            if self.isP(s + reverse):
                return len(s + reverse)
            reverse = s[i] + reverse
        return i*2

# BEGIN KAWIGIEDIT TESTING
# Generated by KawigiEdit-pfx 2.1.9
import sys
import time
def KawigiEdit_RunTest(testNum, p0, hasAnswer, p1):
    sys.stdout.write(str("Test ") + str(testNum) + str(": [") + str("\"") + str(p0) + str("\""))
    print(str("]"))
    obj = ThePalindrome()
    startTime = time.clock()
    answer = obj.find(p0)
    endTime = time.clock()
    res = True
    print(str("Time: ") + str((endTime - startTime)) + str(" seconds"))
    if (hasAnswer):
        print(str("Desired answer:"))
        print(str("\t") + str(p1))

    print(str("Your answer:"))
    print(str("\t") + str(answer))
    if (hasAnswer):
        res = answer == p1

    if (not res):
        print(str("DOESN'T MATCH!!!!"))
    elif ((endTime - startTime) >= 2):
        print(str("FAIL the timeout"))
        res = False
    elif (hasAnswer):
        print(str("Match :-)"))
    else:
        print(str("OK, but is it right?"))

    print(str(""))
    return res

all_right = True


# ----- test 0 -----
p0 = "abab"
p1 = 5
all_right = KawigiEdit_RunTest(0, p0, True, p1) and all_right
# ------------------

# ----- test 1 -----
p0 = "abacaba"
p1 = 7
all_right = KawigiEdit_RunTest(1, p0, True, p1) and all_right
# ------------------

# ----- test 2 -----
p0 = "qwerty"
p1 = 11
all_right = KawigiEdit_RunTest(2, p0, True, p1) and all_right
# ------------------

# ----- test 3 -----
p0 = "abdfhdyrbdbsdfghjkllkjhgfds"
p1 = 38
all_right = KawigiEdit_RunTest(3, p0, True, p1) and all_right
# ------------------

if (all_right):
    print(str("You're a stud (at least on the example cases)!"))
else:
    print(str("Some of the test cases had errors."))

# PROBLEM STATEMENT
# John and Brus are studying string theory at the university.  Brus likes palindromes very much.  A palindrome is a word that reads the same forward and backward.  John would like to surprise Brus by taking a string s, and appending 0 or more characters to the end of s to obtain a palindrome.  He wants that palindrome to be as short as possible.  Return the shortest possible length of a palindrome that John can generate.
#
# DEFINITION
# Class:ThePalindrome
# Method:find
# Parameters:string
# Returns:integer
# Method signature:def find(self, s):
#
#
# CONSTRAINTS
# -s will contain between 1 and 50 characters, inclusive.
# -Each character of s will be a lowercase letter ('a' - 'z').
#
#
# EXAMPLES
#
# 0)
# "abab"
#
# Returns: 5
#
# "ababa" is the shortest palindrome that John can get.
#
# 1)
# "abacaba"
#
# Returns: 7
#
# Already a palindrome.
#
# 2)
# "qwerty"
#
# Returns: 11
#
# All characters are different.
#
# 3)
# "abdfhdyrbdbsdfghjkllkjhgfds"
#
# Returns: 38
#
#
#
# END KAWIGIEDIT TESTING
#Powered by KawigiEdit-pfx 2.1.9!

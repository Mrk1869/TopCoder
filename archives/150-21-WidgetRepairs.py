import math
import string

class WidgetRepairs:
    def days(self, arrivals, numPerDay):

        day = 0
        stock = 0

        for arrival in arrivals:
            if stock == 0 and arrival == 0:
                continue
            stock = stock + arrival - numPerDay
            day = day + 1
            if stock < 0:
                stock = 0

        while stock > 0:
            stock = stock - numPerDay
            day = day + 1

        return day

# BEGIN KAWIGIEDIT TESTING
# Generated by KawigiEdit-pfx 2.1.9
import sys
import time
def KawigiEdit_RunTest(testNum, p0, p1, hasAnswer, p2):
    sys.stdout.write(str("Test ") + str(testNum) + str(": [") + str("{"))
    for i in range(len(p0)):
        if (i > 0):
            sys.stdout.write(str(","))

        sys.stdout.write(str(p0[i]))

    sys.stdout.write(str("}") + str(",") + str(p1))
    print(str("]"))
    obj = WidgetRepairs()
    startTime = time.clock()
    answer = obj.days(p0, p1)
    endTime = time.clock()
    res = True
    print(str("Time: ") + str((endTime - startTime)) + str(" seconds"))
    if (hasAnswer):
        print(str("Desired answer:"))
        print(str("\t") + str(p2))

    print(str("Your answer:"))
    print(str("\t") + str(answer))
    if (hasAnswer):
        res = answer == p2

    if (not res):
        print(str("DOESN'T MATCH!!!!"))
    elif ((endTime - startTime) >= 2):
        print(str("FAIL the timeout"))
        res = False
    elif (hasAnswer):
        print(str("Match :-)"))
    else:
        print(str("OK, but is it right?"))

    print(str(""))
    return res

all_right = True


# ----- test 0 -----
p0 = [10,0,0,4,20]
p1 = 8
p2 = 6
all_right = KawigiEdit_RunTest(0, p0, p1, True, p2) and all_right
# ------------------

# ----- test 1 -----
p0 = [0,0,0]
p1 = 10
p2 = 0
all_right = KawigiEdit_RunTest(1, p0, p1, True, p2) and all_right
# ------------------

# ----- test 2 -----
p0 = [100,100]
p1 = 10
p2 = 20
all_right = KawigiEdit_RunTest(2, p0, p1, True, p2) and all_right
# ------------------

# ----- test 3 -----
p0 = [27,0,0,0,0,9]
p1 = 9
p2 = 4
all_right = KawigiEdit_RunTest(3, p0, p1, True, p2) and all_right
# ------------------

# ----- test 4 -----
p0 = [6,5,4,3,2,1,0,0,1,2,3,4,5,6]
p1 = 3
p2 = 15
all_right = KawigiEdit_RunTest(4, p0, p1, True, p2) and all_right
# ------------------

if (all_right):
    print(str("You're a stud (at least on the example cases)!"))
else:
    print(str("Some of the test cases had errors."))

# PROBLEM STATEMENT
#
# When a widget breaks, it is sent to the widget repair shop, which is capable of repairing at most numPerDay widgets per day.
# Given a record of the number of widgets that arrive at the shop each morning, your task is to determine how many days the shop must
# operate to repair all the widgets, not counting any days the shop spends entirely idle.
#
#
#
# For example, suppose the shop is capable of repairing at most 8 widgets per day, and over a stretch of 5 days, it receives 10, 0, 0, 4, and 20 widgets, respectively.  The shop would operate on days 1 and 2, sit idle on day 3, and operate again on days 4 through 7.  In total, the shop would operate for 6 days to repair all the widgets.
#
#
#
# Create a class WidgetRepairs containing a method days that takes a sequence of arrival counts arrivals (of type
# tuple (integer)) and an integer numPerDay, and calculates the number of days of operation.
#
#
# DEFINITION
# Class:WidgetRepairs
# Method:days
# Parameters:tuple (integer), integer
# Returns:integer
# Method signature:def days(self, arrivals, numPerDay):
#
#
# CONSTRAINTS
# -arrivals contains between 1 and 20 elements, inclusive.
# -Each element of arrivals is between 0 and 100, inclusive.
# -numPerDay is between 1 and 50, inclusive.
#
#
# EXAMPLES
#
# 0)
# { 10, 0, 0, 4, 20 }
# 8
#
# Returns: 6
#
# The example above.
#
# 1)
# { 0, 0, 0 }
# 10
#
# Returns: 0
#
# 2)
# { 100, 100 }
# 10
#
# Returns: 20
#
# 3)
# { 27, 0, 0, 0, 0, 9 }
# 9
#
# Returns: 4
#
# 4)
# { 6, 5, 4, 3, 2, 1, 0, 0, 1, 2, 3, 4, 5, 6 }
# 3
#
# Returns: 15
#
# END KAWIGIEDIT TESTING
#Powered by KawigiEdit-pfx 2.1.9!

import math
import string

class PrefixCode:
    def isOne(self, words):

        min = len(words)
        for word in words:
            for i in range(len(words)):
                if word != words[i] and (words[i].find(word) == 0 or word.find(words[i]) == 0):
                    min = i

        if min == len(words):
            return "Yes"
        else:
            return "No, " + str(min)

# BEGIN KAWIGIEDIT TESTING
# Generated by KawigiEdit-pfx 2.1.9
import sys
import time
def KawigiEdit_RunTest(testNum, p0, hasAnswer, p1):
    sys.stdout.write(str("Test ") + str(testNum) + str(": [") + str("{"))
    for i in range(len(p0)):
        if (i > 0):
            sys.stdout.write(str(","))

        sys.stdout.write(str("\"") + str(p0[i]) + str("\""))

    sys.stdout.write(str("}"))
    print(str("]"))
    obj = PrefixCode()
    startTime = time.clock()
    answer = obj.isOne(p0)
    endTime = time.clock()
    res = True
    print(str("Time: ") + str((endTime - startTime)) + str(" seconds"))
    if (hasAnswer):
        print(str("Desired answer:"))
        print(str("\t") + str("\"") + str(p1) + str("\""))

    print(str("Your answer:"))
    print(str("\t") + str("\"") + str(answer) + str("\""))
    if (hasAnswer):
        res = answer == p1

    if (not res):
        print(str("DOESN'T MATCH!!!!"))
    elif ((endTime - startTime) >= 2):
        print(str("FAIL the timeout"))
        res = False
    elif (hasAnswer):
        print(str("Match :-)"))
    else:
        print(str("OK, but is it right?"))

    print(str(""))
    return res

all_right = True


# ----- test 0 -----
p0 = ["trivial"]
p1 = "Yes"
all_right = KawigiEdit_RunTest(0, p0, True, p1) and all_right
# ------------------

# ----- test 1 -----
p0 = ["10001","011","100","001","10"]
p1 = "No, 2"
all_right = KawigiEdit_RunTest(1, p0, True, p1) and all_right
# ------------------

# ----- test 2 -----
p0 = ["no","nosy","neighbors","needed"]
p1 = "No, 0"
all_right = KawigiEdit_RunTest(2, p0, True, p1) and all_right
# ------------------

# ----- test 3 -----
p0 = ["1010","11","100","0","1011"]
p1 = "Yes"
all_right = KawigiEdit_RunTest(3, p0, True, p1) and all_right
# ------------------

# ----- test 4 -----
p0 = ["No","not"]
p1 = "Yes"
all_right = KawigiEdit_RunTest(4, p0, True, p1) and all_right
# ------------------

if (all_right):
    print(str("You're a stud (at least on the example cases)!"))
else:
    print(str("Some of the test cases had errors."))

# PROBLEM STATEMENT
# A prefix code is a set of words in which no word is a prefix of another word in the set.
# A word v is said to be a prefix of a word w if w starts with v.
#
# An important property of prefix codes is that they are uniquely decodable.
# Prefix codes are commonly used - telephone numbers are an everyday example (as you probably don't
# want a stranger to pick up the phone call you make just because his number is a prefix of the
# number you intend to dial). Prefix codes are also very popular in computer science, the Huffman code
# used for data compression being a famous example.
#
# Given a tuple (string) words, return the string "Yes" if that set of words
# is a prefix code or return the string "No, i" if it is not, where i is replaced by
# the lowest 0-based index of a string in words that is a prefix of another string in words.
# (That index should have no extra leading zeros.)
#
# DEFINITION
# Class:PrefixCode
# Method:isOne
# Parameters:tuple (string)
# Returns:string
# Method signature:def isOne(self, words):
#
#
# NOTES
# -Letters are case sensitive (e.g. "No" is not a prefix of "not").
# -Do not forget the single space between the comma and i in "No, i"
#
#
# CONSTRAINTS
# -words contains between 1 and 50 elements, inclusive.
# -Each element of words contains between 1 and 50 characters, inclusive.
# -Each element of words consists only of characters '0'-'9', 'A'-'Z' and 'a'-'z', inclusive.
# -No two elements of words are equal (as the input represents a set).
#
#
# EXAMPLES
#
# 0)
# {"trivial"}
#
# Returns: "Yes"
#
# As there is only one word, no word can be the prefix of another, so this is a trivial example of a prefix code.
#
# 1)
# {"10001", "011", "100", "001", "10"}
#
# Returns: "No, 2"
#
# "100" (at index 2) and "10" (at index 4) are both a prefix of "10001" and "10" is also a prefix of "100", therefore it is no prefix code. "100" is the prefix with the lowest index.
#
# 2)
# {"no", "nosy", "neighbors", "needed"}
#
# Returns: "No, 0"
#
# 3)
# {"1010", "11", "100", "0", "1011"}
#
# Returns: "Yes"
#
# 4)
# {"No", "not"}
#
# Returns: "Yes"
#
# END KAWIGIEDIT TESTING
#Powered by KawigiEdit-pfx 2.1.9!

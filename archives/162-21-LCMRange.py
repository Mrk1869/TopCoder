import math
import string

class LCMRange:
    def lcm(self, first, last):
        step = range(first, last+1)
        while len(step) > 1:
            tmp = []
            for i in xrange(len(step)-1):
                tmp.append(self.minLC(step[i], step[i+1]))
            step = tmp
        return step[0]

    def minLC(self, a, b):
        n = 1
        while b*n % a > 0:
            n += 1
        return b*n

# BEGIN KAWIGIEDIT TESTING
# Generated by KawigiEdit-pfx 2.1.9
import sys
import time
def KawigiEdit_RunTest(testNum, p0, p1, hasAnswer, p2):
    sys.stdout.write(str("Test ") + str(testNum) + str(": [") + str(p0) + str(",") + str(p1))
    print(str("]"))
    obj = LCMRange()
    startTime = time.clock()
    answer = obj.lcm(p0, p1)
    endTime = time.clock()
    res = True
    print(str("Time: ") + str((endTime - startTime)) + str(" seconds"))
    if (hasAnswer):
        print(str("Desired answer:"))
        print(str("\t") + str(p2))

    print(str("Your answer:"))
    print(str("\t") + str(answer))
    if (hasAnswer):
        res = answer == p2

    if (not res):
        print(str("DOESN'T MATCH!!!!"))
    elif ((endTime - startTime) >= 2):
        print(str("FAIL the timeout"))
        res = False
    elif (hasAnswer):
        print(str("Match :-)"))
    else:
        print(str("OK, but is it right?"))

    print(str(""))
    return res

all_right = True


# ----- test 0 -----
p0 = 1
p1 = 5
p2 = 60
all_right = KawigiEdit_RunTest(0, p0, p1, True, p2) and all_right
# ------------------

# ----- test 1 -----
p0 = 4
p1 = 5
p2 = 20
all_right = KawigiEdit_RunTest(1, p0, p1, True, p2) and all_right
# ------------------

# ----- test 2 -----
p0 = 1
p1 = 12
p2 = 27720
all_right = KawigiEdit_RunTest(2, p0, p1, True, p2) and all_right
# ------------------

if (all_right):
    print(str("You're a stud (at least on the example cases)!"))
else:
    print(str("Some of the test cases had errors."))

# PROBLEM STATEMENT
# The least common multiple of a group of integers is the smallest number that can be evenly divided by all the integers in the group.  Given two ints, first and last, find the least common multiple of all the numbers between first and last, inclusive.
#
# DEFINITION
# Class:LCMRange
# Method:lcm
# Parameters:integer, integer
# Returns:integer
# Method signature:def lcm(self, first, last):
#
#
# CONSTRAINTS
# -first will be between 1 and 12, inclusive.
# -last will be between first and 12, inclusive.
#
#
# EXAMPLES
#
# 0)
# 1
# 5
#
# Returns: 60
#
# The following statements show how 60 can be divided by all numbers from 1 to 5:
# 1*60 = 60
# 2*30 = 60
# 3*20 = 60
# 4*15 = 60
# 5*12 = 60
#
# 1)
# 4
# 5
#
# Returns: 20
#
# Although 60 would be a common multiple for 4 and 5, 20 is the least common multiple.
#
# 2)
# 1
# 12
#
# Returns: 27720
#
# END KAWIGIEDIT TESTING
#Powered by KawigiEdit-pfx 2.1.9!

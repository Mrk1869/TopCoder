import math
import string

class ImageDithering:
    def count(self, dithered, screen):
        count = 0
        dots = list(dithered)
        for line in screen:
            for dot in dots:
                count = count + line.count(dot)
        return count

# BEGIN KAWIGIEDIT TESTING
# Generated by KawigiEdit-pfx 2.1.9
import sys
import time
def KawigiEdit_RunTest(testNum, p0, p1, hasAnswer, p2):
    sys.stdout.write(str("Test ") + str(testNum) + str(": [") + str("\"") + str(p0) + str("\"") + str(",") + str("{"))
    for i in range(len(p1)):
        if (i > 0):
            sys.stdout.write(str(","))

        sys.stdout.write(str("\"") + str(p1[i]) + str("\""))

    sys.stdout.write(str("}"))
    print(str("]"))
    obj = ImageDithering()
    startTime = time.clock()
    answer = obj.count(p0, p1)
    endTime = time.clock()
    res = True
    print(str("Time: ") + str((endTime - startTime)) + str(" seconds"))
    if (hasAnswer):
        print(str("Desired answer:"))
        print(str("\t") + str(p2))

    print(str("Your answer:"))
    print(str("\t") + str(answer))
    if (hasAnswer):
        res = answer == p2

    if (not res):
        print(str("DOESN'T MATCH!!!!"))
    elif ((endTime - startTime) >= 2):
        print(str("FAIL the timeout"))
        res = False
    elif (hasAnswer):
        print(str("Match :-)"))
    else:
        print(str("OK, but is it right?"))

    print(str(""))
    return res

all_right = True


# ----- test 0 -----
p0 = "BW"
p1 = ["AAAAAAAA","ABWBWBWA","AWBWBWBA","ABWBWBWA","AWBWBWBA","AAAAAAAA"]
p2 = 24
all_right = KawigiEdit_RunTest(0, p0, p1, True, p2) and all_right
# ------------------

# ----- test 1 -----
p0 = "BW"
p1 = ["BBBBBBBB","BBWBWBWB","BWBWBWBB","BBWBWBWB","BWBWBWBB","BBBBBBBB"]
p2 = 48
all_right = KawigiEdit_RunTest(1, p0, p1, True, p2) and all_right
# ------------------

# ----- test 2 -----
p0 = "ACEGIKMOQSUWY"
p1 = ["ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWX","ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWX","ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWX","ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWX","ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWX","ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWX"]
p2 = 150
all_right = KawigiEdit_RunTest(2, p0, p1, True, p2) and all_right
# ------------------

# ----- test 3 -----
p0 = "CA"
p1 = ["BBBBBBB","BBBBBBB","BBBBBBB"]
p2 = 0
all_right = KawigiEdit_RunTest(3, p0, p1, True, p2) and all_right
# ------------------

# ----- test 4 -----
p0 = "DCBA"
p1 = ["ACBD"]
p2 = 4
all_right = KawigiEdit_RunTest(4, p0, p1, True, p2) and all_right
# ------------------

if (all_right):
    print(str("You're a stud (at least on the example cases)!"))
else:
    print(str("Some of the test cases had errors."))

# PROBLEM STATEMENT
#
# Sometimes when computer programs have a limited number of colors to use, they use a technique called dithering.  Dithering is when you use a pattern made up of different colors such that when the colors are viewed together, they appear like another color.  For example, you can use a checkerboard pattern of black and white pixels to achieve the illusion of gray.
#
#
#
# You are writing a program to determine how much of the screen is covered by a certain dithered color.  Given a computer screen where each pixel has a certain color, and a list of all the solid colors that make up the dithered color, return the number of pixels on the screen that are used to make up the dithered color.  Each pixel will be represented by a character in screen.  Each character in screen and in dithered will be an uppercase letter ('A'-'Z') representing a color.
#
#
#
# Assume that any pixel which is a color contained in dithered is part of the dithered color.
#
#
# DEFINITION
# Class:ImageDithering
# Method:count
# Parameters:string, tuple (string)
# Returns:integer
# Method signature:def count(self, dithered, screen):
#
#
# CONSTRAINTS
# -dithered will contain between 2 and 26 upper case letters ('A'-'Z'), inclusive.
# -There will be no repeated characters in dithered.
# -screen will have between 1 and 50 elements, inclusive.
# -Each element of screen will contain between 1 and 50 upper case letters ('A'-'Z'), inclusive.
# -All elements of screen will contain the same number of characters.
#
#
# EXAMPLES
#
# 0)
# "BW"
# {"AAAAAAAA",
#  "ABWBWBWA",
#  "AWBWBWBA",
#  "ABWBWBWA",
#  "AWBWBWBA",
#  "AAAAAAAA"}
#
# Returns: 24
#
# Here, our dithered color could consist of black (B) and white (W) pixels, composing a shade of gray.  In the picture, there is a dithered gray square surrounded by another color (A).
#
# 1)
# "BW"
# {"BBBBBBBB",
#  "BBWBWBWB",
#  "BWBWBWBB",
#  "BBWBWBWB",
#  "BWBWBWBB",
#  "BBBBBBBB"}
#
# Returns: 48
#
# Here is the same picture, but with the outer color replaced with black pixels.  Although in reality, the outer pixels do not form a dithered color, your algorithm should still assume they are part of the dithered pattern.
#
# 2)
# "ACEGIKMOQSUWY"
# {"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWX",
#  "ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWX",
#  "ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWX",
#  "ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWX",
#  "ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWX",
#  "ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWX"}
#
# Returns: 150
#
# A picture of vertical stripes, every other stripe is considered part of the dithered color.
#
# 3)
# "CA"
# {"BBBBBBB",
#  "BBBBBBB",
#  "BBBBBBB"}
#
# Returns: 0
#
# The dithered color is not present.
#
# 4)
# "DCBA"
# {"ACBD"}
#
# Returns: 4
#
# The order of the colors doesn't matter.
#
# END KAWIGIEDIT TESTING
#Powered by KawigiEdit-pfx 2.1.9!

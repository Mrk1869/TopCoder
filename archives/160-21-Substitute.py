import math
import string

class Substitute:
    def getValue(self, key, code):
        res = 0;
        for char in code:
            index = key.find(char)+1
            if index > 0:
                if index == 10:
                    index = 0
                res = res*10 + index

        return res

# BEGIN KAWIGIEDIT TESTING
# Generated by KawigiEdit-pfx 2.1.9
import sys
import time
def KawigiEdit_RunTest(testNum, p0, p1, hasAnswer, p2):
    sys.stdout.write(str("Test ") + str(testNum) + str(": [") + str("\"") + str(p0) + str("\"") + str(",") + str("\"") + str(p1) + str("\""))
    print(str("]"))
    obj = Substitute()
    startTime = time.clock()
    answer = obj.getValue(p0, p1)
    endTime = time.clock()
    res = True
    print(str("Time: ") + str((endTime - startTime)) + str(" seconds"))
    if (hasAnswer):
        print(str("Desired answer:"))
        print(str("\t") + str(p2))

    print(str("Your answer:"))
    print(str("\t") + str(answer))
    if (hasAnswer):
        res = answer == p2

    if (not res):
        print(str("DOESN'T MATCH!!!!"))
    elif ((endTime - startTime) >= 2):
        print(str("FAIL the timeout"))
        res = False
    elif (hasAnswer):
        print(str("Match :-)"))
    else:
        print(str("OK, but is it right?"))

    print(str(""))
    return res

all_right = True


# ----- test 0 -----
p0 = "TRADINGFEW"
p1 = "LGXWEV"
p2 = 709
all_right = KawigiEdit_RunTest(0, p0, p1, True, p2) and all_right
# ------------------

# ----- test 1 -----
p0 = "ABCDEFGHIJ"
p1 = "XJ"
p2 = 0
all_right = KawigiEdit_RunTest(1, p0, p1, True, p2) and all_right
# ------------------

# ----- test 2 -----
p0 = "CRYSTALBUM"
p1 = "MMA"
p2 = 6
all_right = KawigiEdit_RunTest(2, p0, p1, True, p2) and all_right
# ------------------

if (all_right):
    print(str("You're a stud (at least on the example cases)!"))
else:
    print(str("Some of the test cases had errors."))

# PROBLEM STATEMENT
# A simple, easy to remember system for encoding integer amounts can be very useful.
# For example, dealers at flea markets put the information about an item on a card
# that they let potential buyers see.  They find it advantageous to encode the
# amount they originally paid for the item on the card.
#
# A good system is to use a substitution code, in which each digit is encoded by a
# letter.  An easy to remember 10-letter word or phrase, the key, is chosen. Every
# '1' in the value is replaced by the first letter of the key, every '2' is replaced by the
# second letter of the key, and so on. Every '0' is replaced by the last letter of
# the key.  Letters that do not appear in the key can be inserted anywhere without affecting the value represented by the code..  This
# helps to make the resulting code much harder to break (without knowing the key).
#
# Create a class Substitute that contains the method getValue that is given the
# strings key and code as input and that returns the decoded value.
#
#
#
# DEFINITION
# Class:Substitute
# Method:getValue
# Parameters:string, string
# Returns:integer
# Method signature:def getValue(self, key, code):
#
#
# CONSTRAINTS
# -code contains between 1 and 9 characters inclusive, all uppercase letters 'A'-'Z'
# -code contains at least one letter that is found in key
# -key contains exactly 10 uppercase letters 'A'-'Z', all distinct from each other
#
#
# EXAMPLES
#
# 0)
# "TRADINGFEW"
# "LGXWEV"
#
# Returns: 709
#
#
#
# The L,X, and V are ignored since they do not appear in the key. G is the
# seventh letter in the key, W is the 10th letter, and E is the 9th letter.
#
#
#
# 1)
# "ABCDEFGHIJ"
# "XJ"
#
# Returns: 0
#
# 2)
# "CRYSTALBUM"
# "MMA"
#
# Returns: 6
#
# END KAWIGIEDIT TESTING
#Powered by KawigiEdit-pfx 2.1.9!

import math
import string

class StreetParking:
    def freeParks(self, street):

        margined_street = "--"+street+"--"
        count = 0

        for i in range(2, len(margined_street)-2):
            if margined_street[i+2] == "B":
                continue
            if margined_street[i+1] == "B":
                continue
            if margined_street[i+1] == "S":
                continue
            if margined_street[i] == "D":
                continue
            if margined_street[i] == "B":
                continue
            if margined_street[i] == "S":
                continue
            if margined_street[i-1] == "S":
                continue
            count += 1
        return count

# BEGIN KAWIGIEDIT TESTING
# Generated by KawigiEdit-pfx 2.1.9
import sys
import time
def KawigiEdit_RunTest(testNum, p0, hasAnswer, p1):
    sys.stdout.write(str("Test ") + str(testNum) + str(": [") + str("\"") + str(p0) + str("\""))
    print(str("]"))
    obj = StreetParking()
    startTime = time.clock()
    answer = obj.freeParks(p0)
    endTime = time.clock()
    res = True
    print(str("Time: ") + str((endTime - startTime)) + str(" seconds"))
    if (hasAnswer):
        print(str("Desired answer:"))
        print(str("\t") + str(p1))

    print(str("Your answer:"))
    print(str("\t") + str(answer))
    if (hasAnswer):
        res = answer == p1

    if (not res):
        print(str("DOESN'T MATCH!!!!"))
    elif ((endTime - startTime) >= 2):
        print(str("FAIL the timeout"))
        res = False
    elif (hasAnswer):
        print(str("Match :-)"))
    else:
        print(str("OK, but is it right?"))

    print(str(""))
    return res

all_right = True


# ----- test 0 -----
p0 = "---B--S-D--S--"
p1 = 4
all_right = KawigiEdit_RunTest(0, p0, True, p1) and all_right
# ------------------

# ----- test 1 -----
p0 = "DDBDDBDDBDD"
p1 = 0
all_right = KawigiEdit_RunTest(1, p0, True, p1) and all_right
# ------------------

# ----- test 2 -----
p0 = "--S--S--S--S--"
p1 = 2
all_right = KawigiEdit_RunTest(2, p0, True, p1) and all_right
# ------------------

# ----- test 3 -----
p0 = "SSD-B---BD-DDSB-----S-S--------S-B----BSB-S--B-S-D"
p1 = 14
all_right = KawigiEdit_RunTest(3, p0, True, p1) and all_right
# ------------------

if (all_right):
    print(str("You're a stud (at least on the example cases)!"))
else:
    print(str("Some of the test cases had errors."))

# PROBLEM STATEMENT
# You are looking for a place to park your car on a suburban street. You can park at any position that meets the following requirements:
#
# 1.    It is not directly in front of a private driveway.
# 2.    It is not directly in front of a bus stop.
# 3.    It is not 5 meters before a bus stop.
# 4.    It is not 10 meters before a bus stop.
# 5.    It is not directly in front of a side-street.
# 6.    It is not 5 meters before a side-street.
# 7.    It is not 5 meters after a side-street.
#
# The street will be represented as a string, where each character describes a section of the street 5 meters in length. So the first character describes the first 5 meters of the street, the second character describes the next 5 meters and so on. street will use 'D' for driveway, 'B' for bus stop, 'S' for side-street and '-' for all other sections of the street. A position is directly in front of an object if it has the same index as the object in street. A position is before an object if its index is lower than the index of the object in street. Finally, a position is after an object if its index is higher than the index of the object in street.
#
# Given the street return the total number of possible parking spaces on that street.
#
#
# DEFINITION
# Class:StreetParking
# Method:freeParks
# Parameters:string
# Returns:integer
# Method signature:def freeParks(self, street):
#
#
# CONSTRAINTS
# -street will have between 1 and 50 characters inclusive.
# -street will only contain characters 'D', 'B', 'S' and '-'.
#
#
# EXAMPLES
#
# 0)
# "---B--S-D--S--"
#
# Returns: 4
#
# The street looks like this:
# ---B--S-D--S--
# ^   ^    ^   ^
# |   |    |   |
# The arrows indicate where you are allowed to park on this street. Thus the method should return 4.
#
# 1)
# "DDBDDBDDBDD"
#
# Returns: 0
#
# This street is full of private driveways and bus stops. You cannot park anywhere on this street. The method should return 0.
#
# 2)
# "--S--S--S--S--"
#
# Returns: 2
#
# You can only park at the first and last positions on this street. The method should return 2.
#
# 3)
# "SSD-B---BD-DDSB-----S-S--------S-B----BSB-S--B-S-D"
#
# Returns: 14
#
# END KAWIGIEDIT TESTING
#Powered by KawigiEdit-pfx 2.1.9!

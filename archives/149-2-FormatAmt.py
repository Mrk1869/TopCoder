import math
import string

class FormatAmt:
    def amount(self, dollars, cents):

        tmp = []
        while dollars > 0:
            num =str(dollars - dollars/1000*1000)
            if len(num) < 2:
                num = "00"+num
            if len(num) < 1:
                num = "0"+num
            tmp.append(num)
            dollars = dollars/1000
        tmp.reverse()

        if len(tmp) == 0:
            tmp.append("0")

        tmp[0] = str(int(tmp[0]))

        dollars_str = "$"
        for num in tmp:
            dollars_str = dollars_str+num+","

        cents_str = str(cents)
        if len(cents_str) < 2:
            cents_str = "0" + cents_str
        return dollars_str[0:-1] + "." +cents_str

# BEGIN KAWIGIEDIT TESTING
# Generated by KawigiEdit-pfx 2.1.9
import sys
import time
def KawigiEdit_RunTest(testNum, p0, p1, hasAnswer, p2):
    sys.stdout.write(str("Test ") + str(testNum) + str(": [") + str(p0) + str(",") + str(p1))
    print(str("]"))
    obj = FormatAmt()
    startTime = time.clock()
    answer = obj.amount(p0, p1)
    endTime = time.clock()
    res = True
    print(str("Time: ") + str((endTime - startTime)) + str(" seconds"))
    if (hasAnswer):
        print(str("Desired answer:"))
        print(str("\t") + str("\"") + str(p2) + str("\""))

    print(str("Your answer:"))
    print(str("\t") + str("\"") + str(answer) + str("\""))
    if (hasAnswer):
        res = answer == p2

    if (not res):
        print(str("DOESN'T MATCH!!!!"))
    elif ((endTime - startTime) >= 2):
        print(str("FAIL the timeout"))
        res = False
    elif (hasAnswer):
        print(str("Match :-)"))
    else:
        print(str("OK, but is it right?"))

    print(str(""))
    return res

all_right = True


# ----- test 0 -----
p0 = 123456
p1 = 0
p2 = "$123,456.00"
all_right = KawigiEdit_RunTest(0, p0, p1, True, p2) and all_right
# ------------------

# ----- test 1 -----
p0 = 49734321
p1 = 9
p2 = "$49,734,321.09"
all_right = KawigiEdit_RunTest(1, p0, p1, True, p2) and all_right
# ------------------

# ----- test 2 -----
p0 = 0
p1 = 99
p2 = "$0.99"
all_right = KawigiEdit_RunTest(2, p0, p1, True, p2) and all_right
# ------------------

# ----- test 3 -----
p0 = 249
p1 = 30
p2 = "$249.30"
all_right = KawigiEdit_RunTest(3, p0, p1, True, p2) and all_right
# ------------------

# ----- test 4 -----
p0 = 1000
p1 = 1
p2 = "$1,000.01"
all_right = KawigiEdit_RunTest(4, p0, p1, True, p2) and all_right
# ------------------

if (all_right):
    print(str("You're a stud (at least on the example cases)!"))
else:
    print(str("Some of the test cases had errors."))

# PROBLEM STATEMENT
# In documents, it is frequently necessary to write monetary amounts in a
# standard format.  We have decided to format amounts as follows:
#     the amount must start with '$'
#     the amount should have a leading '0' if and only if it is less then 1 dollar.
#     the amount must end with a decimal point and exactly 2 following digits.
#     the digits to the left of the decimal point must be separated into groups of three by commas (a group of one or two digits may appear on the left).
#
#
# Create a class FormatAmt that contains a method amount that takes two int's, dollars and cents, as inputs and returns the properly formatted string.
#
#
#
# DEFINITION
# Class:FormatAmt
# Method:amount
# Parameters:integer, integer
# Returns:string
# Method signature:def amount(self, dollars, cents):
#
#
# NOTES
# -One dollar is equal to 100 cents.
#
#
# CONSTRAINTS
# -dollars will be between 0 and 2,000,000,000 inclusive
# -cents will be between 0 and 99 inclusive
#
#
# EXAMPLES
#
# 0)
# 123456
# 0
#
# Returns: "$123,456.00"
#
# Note that there is no space between the $ and the first digit.
#
# 1)
# 49734321
# 9
#
# Returns: "$49,734,321.09"
#
# 2)
# 0
# 99
#
# Returns: "$0.99"
#
# Note the leading 0.
#
# 3)
# 249
# 30
#
# Returns: "$249.30"
#
# 4)
# 1000
# 1
#
# Returns: "$1,000.01"
#
# END KAWIGIEDIT TESTING
#Powered by KawigiEdit-pfx 2.1.9!
